rowMeans(num_clutches[, , 3], na.rm = TRUE)/10
),
"number.clutches"),
setNames(data.frame(
rowMeans(sum_gimbangle[, , 3], na.rm = TRUE)
),
"sum.gimbal.angle"),
setNames(data.frame(
rowMeans(sum_armangle[, , 3], na.rm = TRUE)
),
"sum.arm.angle"),
setNames(data.frame(
rowMeans(sos_force[, , 3], na.rm = TRUE)/100000
),
"sos.force")
)
)
subj_sensor_norm
subj_sensor_norm[[1]]$completion.time
subj_sensor_norm <- list(
cbind(
setNames(data.frame(c(1:30)),
"subject.num.E"),
setNames(data.frame(
rowMeans(completion_time[, , 1], na.rm = TRUE)/1000
),
"completion.time"),
setNames(data.frame(
rowMeans(travel_distance[, , 1], na.rm = TRUE)/1000
),
"travel.distance"),
setNames(data.frame(
rowMeans(num_clutches[, , 1], na.rm = TRUE)/10
),
"number.clutches"),
setNames(data.frame(
rowMeans(sum_gimbangle[, , 1], na.rm = TRUE)
),
"sum.gimbal.angle"),
setNames(data.frame(
rowMeans(sum_armangle[, , 1], na.rm = TRUE)
),
"sum.arm.angle"),
setNames(data.frame(
rowMeans(sos_force[, , 1], na.rm = TRUE)/100000
),
"sos.force")
),
cbind(
setNames(data.frame(c(1:30)),
"subject.num.P"),
setNames(data.frame(
rowMeans(completion_time[, , 2], na.rm = TRUE)/1000
),
"completion.time"),
setNames(data.frame(
rowMeans(travel_distance[, , 2], na.rm = TRUE)/1000
),
"travel.distance"),
setNames(data.frame(
rowMeans(num_clutches[, , 2], na.rm = TRUE)/10
),
"number.clutches"),
setNames(data.frame(
rowMeans(sum_gimbangle[, , 2], na.rm = TRUE)
),
"sum.gimbal.angle"),
setNames(data.frame(
rowMeans(sum_armangle[, , 2], na.rm = TRUE)
),
"sum.arm.angle"),
setNames(data.frame(
rowMeans(sos_force[, , 2], na.rm = TRUE)/100000
),
"sos.force")
),
cbind(
setNames(data.frame(c(1:30)),
"subject.num.S"),
setNames(data.frame(
rowMeans(completion_time[, , 3], na.rm = TRUE)/1000
),
"completion.time"),
setNames(data.frame(
rowMeans(travel_distance[, , 3], na.rm = TRUE)/1000
),
"travel.distance"),
setNames(data.frame(
rowMeans(num_clutches[, , 3], na.rm = TRUE)/10
),
"number.clutches"),
setNames(data.frame(
rowMeans(sum_gimbangle[, , 3], na.rm = TRUE)
),
"sum.gimbal.angle"),
setNames(data.frame(
rowMeans(sum_armangle[, , 3], na.rm = TRUE)
),
"sum.arm.angle"),
setNames(data.frame(
rowMeans(sos_force[, , 3], na.rm = TRUE)/100000
),
"sos.force")
)
)
# putting the sensor results in one file
subj_feature_all <- list(
cbind(
setNames(data.frame(c(1:30)),
"subject.num.E"),
setNames(data.frame(subj_sensor[[1]]$completion.time),
"completion.time"),
setNames(data.frame(subj_sensor[[1]]$travel.distance),
"travel.distance"),
setNames(data.frame(subj_sensor[[1]]$number.clutches),
"number.clutches"),
setNames(data.frame(subj_sensor[[1]]$sum.gimbal.angle),
"delta.theta"),
setNames(data.frame(subj_sensor[[1]]$sos.force),
"sos.force")
),
cbind(
setNames(data.frame(c(1:30)),
"subject.num.P"),
setNames(data.frame(subj_sensor[[2]]$completion.time),
"completion.time"),
setNames(data.frame(subj_sensor[[2]]$travel.distance),
"travel.distance"),
setNames(data.frame(subj_sensor[[2]]$number.clutches),
"number.clutches"),
setNames(data.frame(subj_sensor[[2]]$sum.gimbal.angle),
"delta.theta"),
setNames(data.frame(subj_sensor[[2]]$sos.force),
"sos.force")
),
cbind(
setNames(data.frame(c(1:30)),
"subject.num.S"),
setNames(data.frame(subj_sensor[[3]]$completion.time),
"completion.time"),
setNames(data.frame(subj_sensor[[3]]$travel.distance),
"travel.distance"),
setNames(data.frame(subj_sensor[[3]]$number.clutches),
"number.clutches"),
setNames(data.frame(subj_sensor[[3]]$sum.gimbal.angle),
"delta.theta"),
setNames(data.frame(subj_sensor[[3]]$sos.force),
"sos.force")
)
)
# putting the sensor results in one file
subj_feature_all_norm <- list(
cbind(
setNames(data.frame(c(1:30)),
"subject.num.E"),
setNames(data.frame(subj_sensor_norm[[1]]$completion.time),
"completion.time"),
setNames(data.frame(subj_sensor_norm[[1]]$travel.distance),
"travel.distance"),
setNames(data.frame(subj_sensor_norm[[1]]$number.clutches),
"number.clutches"),
setNames(data.frame(subj_sensor_norm[[1]]$sum.gimbal.angle),
"delta.theta"),
setNames(data.frame(subj_sensor_norm[[1]]$sos.force),
"sos.force")
),
cbind(
setNames(data.frame(c(1:30)),
"subject.num.P"),
setNames(data.frame(subj_sensor_norm[[2]]$completion.time),
"completion.time"),
setNames(data.frame(subj_sensor_norm[[2]]$travel.distance),
"travel.distance"),
setNames(data.frame(subj_sensor_norm[[2]]$number.clutches),
"number.clutches"),
setNames(data.frame(subj_sensor_norm[[2]]$sum.gimbal.angle),
"delta.theta"),
setNames(data.frame(subj_sensor_norm[[2]]$sos.force),
"sos.force")
),
cbind(
setNames(data.frame(c(1:30)),
"subject.num.S"),
setNames(data.frame(subj_sensor_norm[[3]]$completion.time),
"completion.time"),
setNames(data.frame(subj_sensor_norm[[3]]$travel.distance),
"travel.distance"),
setNames(data.frame(subj_sensor_norm[[3]]$number.clutches),
"number.clutches"),
setNames(data.frame(subj_sensor_norm[[3]]$sum.gimbal.angle),
"delta.theta"),
setNames(data.frame(subj_sensor_norm[[3]]$sos.force),
"sos.force")
)
)
subj_sensor_norm
completion_time
rowMeans(completion_time ,na.rm = TRUE)
rowMeans(completion_time[ , ,1] ,na.rm = TRUE)
rowMeans(completion_time[ , ,2] ,na.rm = TRUE)
# reading data from the saved file
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/ResultsGenSurveyNorm.RData",
sep = ""
)
)
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/FeatureGenNorm.RData",
sep = ""
)
)
# reading data from the saved file
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/ResultsGenSurveyNorm.RData",
sep = ""
)
)
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/FeatureGenSensorNorm.RData",
sep = ""
)
)
df_transformed <-
rbind(
cbind(subj_survey[[1]][, 2:7], subj_survey[[2]][, 2:24],
subj_feature_norm[[1]][, 2:6], device = 'Excalibur'),
cbind(subj_survey[[1]][, 2:7], subj_survey[[3]][, 2:24],
subj_feature_norm[[2]][, 2:6], device = 'Premium'),
cbind(subj_survey[[1]][, 2:7], subj_survey[[4]][, 2:24],
subj_feature_norm[[3]][, 2:6], device = 'Sigma7')
)
# A4 is important
mlm1 <- lm(
rowMeans(
cbind(A1,
A4,
A5,
A6,
A7,
A8,
A9,
A10,
A13,
A14,
A15,
A16,
A17,
A18)
) ~ completion.time +
travel.distance + number.clutches + delta.theta+
sos.force,
data = df_transformed
)
# reading data from the saved file
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/ResultsGenSurveyNorm.RData",
sep = ""
)
)
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/FeatureGenSensorNorm.RData",
sep = ""
)
)
df_transformed <-
rbind(
cbind(subj_survey[[1]][, 2:7], subj_survey[[2]][, 2:24],
subj_feature_norm[[1]][, 2:6], device = 'Excalibur'),
cbind(subj_survey[[1]][, 2:7], subj_survey[[3]][, 2:24],
subj_feature_norm[[2]][, 2:6], device = 'Premium'),
cbind(subj_survey[[1]][, 2:7], subj_survey[[4]][, 2:24],
subj_feature_norm[[3]][, 2:6], device = 'Sigma7')
)
# A4 is important
mlm1 <- lm(
rowMeans(
cbind(A1,
A4,
A5,
A6,
A7,
A8,
A9,
A10,
A13,
A14,
A15,
A16,
A17,
A18)
) ~ completion.time +
travel.distance + number.clutches + sum.gimbal.angle+
sos.force,
data = df_transformed
)
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
p_load(
R.matlab,
plotly,
extrafont,
grDevices,
gridExtra,
stats,
qlcMatrix,
dplyr,
stringr,
tidyverse,
utils,
reshape2,
ggplot2,
devtools,
knitr,
kableExtra,
data.table,
RColorBrewer,
readxl,
abind,
fmsb,
chron,
jmv,
factoextra,
imputeTS
)
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/FeatureGenSensorNorm.RData",
sep = ""
)
)
View(subj_feature_norm)
df_transformed <-
rbind(
cbind(subj_survey[[1]][, 2:7], subj_survey[[2]][, 2:24],
subj_feature_norm[[1]][, 2:6], device = 'Excalibur'),
cbind(subj_survey[[1]][, 2:7], subj_survey[[3]][, 2:24],
subj_feature_norm[[2]][, 2:6], device = 'Premium'),
cbind(subj_survey[[1]][, 2:7], subj_survey[[4]][, 2:24],
subj_feature_norm[[3]][, 2:6], device = 'Sigma7')
)
# reading data from the saved file
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/ResultsGenSurveyNorm.RData",
sep = ""
)
)
df_transformed <-
rbind(
cbind(subj_survey[[1]][, 2:7], subj_survey[[2]][, 2:24],
subj_feature_norm[[1]][, 2:6], device = 'Excalibur'),
cbind(subj_survey[[1]][, 2:7], subj_survey[[3]][, 2:24],
subj_feature_norm[[2]][, 2:6], device = 'Premium'),
cbind(subj_survey[[1]][, 2:7], subj_survey[[4]][, 2:24],
subj_feature_norm[[3]][, 2:6], device = 'Sigma7')
)
df_transformed <-
rbind(
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[2]][, 2:24],
subj_feature_norm[[1]][, 2:6], device = 'Excalibur'),
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[3]][, 2:24],
subj_feature_norm[[2]][, 2:6], device = 'Premium'),
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[4]][, 2:24],
subj_feature_norm[[3]][, 2:6], device = 'Sigma7')
)
# A4 is important
mlm1 <- lm(
rowMeans(
cbind(A1,
A4,
A5,
A6,
A7,
A8,
A9,
A10,
A13,
A14,
A15,
A16,
A17,
A18)
) ~ completion.time +
travel.distance + number.clutches + sum.gimbal.angle+
sos.force,
data = df_transformed
)
View(df_transformed)
View(subj_feature_norm)
# reading data from the saved file
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/ResultsGenSurveyNorm.RData",
sep = ""
)
)
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/FeatureGenSensorNorm.RData",
sep = ""
)
)
df_transformed <-
rbind(
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[2]][, 2:24],
subj_feature_norm[[1]][, 3:7], device = 'Excalibur'),
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[3]][, 2:24],
subj_feature_norm[[2]][, 3:7], device = 'Premium'),
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[4]][, 2:24],
subj_feature_norm[[3]][, 3:7], device = 'Sigma7')
)
# A4 is important
mlm1 <- lm(
rowMeans(
cbind(A1,
A4,
A5,
A6,
A7,
A8,
A9,
A10,
A13,
A14,
A15,
A16,
A17,
A18)
) ~ completion.time +
travel.distance + number.clutches + sum.gimbal.angle +
sos.force,
data = df_transformed
)
View(subj_feature_norm)
View(df_transformed)
subj_feature_norm[[1]]
# reading data from the saved file
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/ResultsGenSurveyNorm.RData",
sep = ""
)
)
load(
paste(
"~/Desktop/Canada/neuroArm/neuroArmPLUS",
"/Smart Handcontroller/data/FeatureGenSensorNorm.RData",
sep = ""
)
)
df_transformed <-
rbind(
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[2]][, 2:24],
subj_feature_norm[[1]][, 2:6], device = 'Excalibur'),
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[3]][, 2:24],
subj_feature_norm[[2]][, 2:6], device = 'Premium'),
cbind(subj_survey_norm[[1]][, 2:7], subj_survey_norm[[4]][, 2:24],
subj_feature_norm[[3]][, 2:6], device = 'Sigma7')
)
# A4 is important
mlm1 <- lm(
rowMeans(
cbind(A1,
A4,
A5,
A6,
A7,
A8,
A9,
A10,
A13,
A14,
A15,
A16,
A17,
A18)
) ~ completion.time +
travel.distance + number.clutches + sum.gimbal.angle +
sos.force,
data = df_transformed
)
summary(mlm1)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
# p_load is equivalent to combining both install.packages() and library()
p_load(R.matlab, plotly, extrafont, grDevices, ggpubr,
dplyr, stringr, tidyverse, utils, reshape2,
anomalize, MVN, fractal,
ecp, dfphase1, gridExtra,
MALDIquant, dtwclust,
knitr, kableExtra, dplyr, data.table,
RColorBrewer)
